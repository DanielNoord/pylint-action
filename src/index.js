const core = require("@actions/core");
const installDependencies = require("./installDependencies");
const handleOutput = require("./handleOutput");
const executePylint = require("./executePylint");
const getFiles = require("./getFiles");

/**
 * Main entry point into the action.
 */
async function run() {
  // Get input from user
  /** Path to run pylint over. */
  // TODO: Add support for path
  // const path = core.getInput("path");

  /** Pylint version to install.
   *
   * Can be 'latest', 'main' or a semversion.
   */
  const pylintVersion = core.getInput("version");

  // TODO: Add tests for use of different config-files
  /** Location of the config file to be used. */
  const configFile = core.getInput("config-file");

  // TODO: Add tests for use of arguments
  /** Arguments to be added to the command. */
  const args = core.getInput("arguments");

  /** Github access token. */
  const token = core.getInput("github-token");

  try {
    const files = await getFiles.getFiles(token);

    if (files === "") {
      return;
    }

    // Install dependencies
    await installDependencies.installPylint(pylintVersion);

    // Set up the pylint command
    let pylintCommand = files;
    if (configFile !== "none" && configFile !== "") {
      pylintCommand += ` --rcfile=${configFile}`;
    }
    if (args !== "none" && args !== "") {
      pylintCommand += ` ${args}`;
    }

    // Execute
    const [myOutput, myError] = await executePylint.executePylint(pylintCommand);

    // Handle the output generated by pylint
    await handleOutput.handleOutput(myOutput, myError);
  } catch (error) {
    // Log error if something failed
    core.setFailed(error.message);
  }
}

run();
